name: Qt5 Build and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build:
    strategy:
      fail-fast: false  # 不要因为一个平台失败就停止其他平台
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        qt-version: ['5.15.2']
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt (Windows/Linux)
      if: matrix.os != 'macos-latest'
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        modules: 'qtnetworkauth'
        
    - name: Install Qt (macOS)
      if: matrix.os == 'macos-latest'
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        arch: 'clang_64'
        target: 'desktop'
        # macOS Qt 5.15.2 doesn't need separate modules, core components are included
        
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build libboost-all-dev
        
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: johnwason/vcpkg-action@v6
      id: vcpkg
      with:
        pkgs: boost-asio
        triplet: x64-windows-release
        token: ${{ github.token }}
        github-binarycache: true
             
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja boost
        
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      continue-on-error: true
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      run: |
        cmake -S . -B build -G "Ninja Multi-Config" `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_PREFIX_PATH="${{ env.Qt5_Dir }}" `
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" `
          -DVCPKG_TARGET_TRIPLET=x64-windows `
          -DCMAKE_VERBOSE_MAKEFILE=ON
          
    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      continue-on-error: true
      run: |
        cmake -S . -B build -G "Ninja Multi-Config" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="${{ env.Qt5_Dir }}" \
          -DCMAKE_OSX_ARCHITECTURES=x86_64
          
    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      continue-on-error: true
      run: |
        cmake -S . -B build -G "Ninja Multi-Config" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="${{ env.Qt5_Dir }}"
          
    - name: Build
      continue-on-error: true
      run: cmake --build build --config Release
      
    - name: Package (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      continue-on-error: true
      run: |
        cd build
        cpack -G DEB -C Release
        cpack -G TGZ -C Release
        
    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      continue-on-error: true
      run: |
        cd build
        cpack -G NSIS -C Release
        
    - name: Package (macOS)
      if: matrix.os == 'macos-latest'
      continue-on-error: true
      run: |
        cd build
        cpack -G DragNDrop -C Release
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: cfping-windows-latest
        path: |
          build/*.exe
          build/_CPack_Packages/*/NSIS/*.exe
        retention-days: 30
      if: matrix.os == 'windows-latest'
        
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: cfping-ubuntu-latest
        path: |
          build/*.deb
          build/*.tar.gz
        retention-days: 30
      if: matrix.os == 'ubuntu-latest'
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: cfping-macos-latest
        path: build/*.dmg
        retention-days: 30
      if: matrix.os == 'macos-latest'

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate release tag
      id: tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "tag=v$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "name=Release $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        else
          echo "tag=dev-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "name=Development Build $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        fi
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Display artifact structure
      run: find ./artifacts -type f -name "*" | head -20
      
    - name: Prepare release files
      run: |
        mkdir -p ./release-files
        
        # Copy Windows files if they exist
        if [ -d "./artifacts/cfping-windows-latest" ]; then
          find ./artifacts/cfping-windows-latest -name "*.exe" -exec cp {} ./release-files/ \;
        fi
        
        # Copy Linux files if they exist
        if [ -d "./artifacts/cfping-ubuntu-latest" ]; then
          find ./artifacts/cfping-ubuntu-latest -name "*.deb" -exec cp {} ./release-files/ \;
          find ./artifacts/cfping-ubuntu-latest -name "*.tar.gz" -exec cp {} ./release-files/ \;
        fi
        
        # Copy macOS files if they exist
        if [ -d "./artifacts/cfping-macos-latest" ]; then
          find ./artifacts/cfping-macos-latest -name "*.dmg" -exec cp {} ./release-files/ \;
        fi
        
        # List files to be released
        echo "Files to be released:"
        ls -la ./release-files/
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: ${{ steps.tag.outputs.name }}
        body: |
          ## CFPing Release
          
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Build Date:** $(date +'%Y-%m-%d %H:%M:%S UTC')
          
          ### Downloads
          - **Windows**: CFPing-1.0.0-win64.exe (Windows 安装包)
          - **Linux**: CFPing-1.0.0-Linux.deb (Ubuntu/Debian 包)
          - **Linux**: CFPing-1.0.0-Linux.tar.gz (通用 Linux 包)  
          - **macOS**: CFPing-1.0.0-Darwin.dmg (macOS 磁盘镜像)
          
          ### Changes
          - Latest changes from ${{ github.ref_name }} branch
          
          ---
          *This release was automatically generated from commit ${{ github.sha }}*
        draft: false
        prerelease: ${{ steps.tag.outputs.prerelease }}
        
    - name: Upload Windows Release Asset
      if: hashFiles('./release-files/*.exe') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/CFPing-1.0.0-win64.exe
        asset_name: CFPing-1.0.0-win64.exe
        asset_content_type: application/octet-stream
        
    - name: Upload Linux DEB Release Asset
      if: hashFiles('./release-files/*.deb') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/CFPing-1.0.0-Linux.deb
        asset_name: CFPing-1.0.0-Linux.deb
        asset_content_type: application/vnd.debian.binary-package
        
    - name: Upload Linux TAR Release Asset
      if: hashFiles('./release-files/*.tar.gz') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/CFPing-1.0.0-Linux.tar.gz
        asset_name: CFPing-1.0.0-Linux.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload macOS Release Asset
      if: hashFiles('./release-files/*.dmg') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/CFPing-1.0.0-Darwin.dmg
        asset_name: CFPing-1.0.0-Darwin.dmg
        asset_content_type: application/x-apple-diskimage
